{"version":3,"file":"static/js/Cast.f9697324.chunk.js","mappings":"+QAUe,SAASA,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAASG,EAAAA,EAAAA,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MAkBjB,OAjBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,2FACEL,EAAUF,EAAAA,EAAAA,SADZ,kBAGuBA,EAAAA,EAAAA,wBAA4BG,GAHnD,OAGUK,EAHV,OAIIT,EAAQS,GACRN,EAAUF,EAAAA,EAAAA,UALd,gDAQIE,EAAUF,EAAAA,EAAAA,UARd,0DADc,uBAAC,WAAD,wBAadS,EACD,GAAE,CAACN,IAEJO,QAAQC,IAAIV,EAAQH,EAAMO,IAExB,iCACE,sCACA,oCAGL,C,2GCpCDO,IAAAA,SAAAA,QAAyB,gCAIzB,aAAO,OAAP,oBAAO,2GAAoCC,EAApC,+BAA4C,GAAIC,EAAhD,+BAAuD,EAAvD,SACkBF,IAAAA,IAAA,6BAAgCC,EAAhC,iBAA8CC,IADhE,cACCC,EADD,yBAEEA,EAASP,MAFX,mEAKP,aAAO,OAAP,oBAAO,oGACkBI,IAAAA,IAAA,uBADlB,cACCG,EADD,yBAEEA,EAASP,MAFX,kEAKP,aAAO,OAAP,oBAAO,WAAkCQ,GAAlC,uFACkBJ,IAAAA,IAAA,gBAAmBI,IADrC,cACCD,EADD,yBAEEA,EAASP,MAFX,kEAKP,aAAO,OAAP,oBAAO,WAAuCQ,GAAvC,uFACkBJ,IAAAA,IAAA,gBAAmBI,EAAnB,aADlB,cACCD,EADD,yBAEEA,EAASP,MAFX,kE,aAKA,O,oBAAA,WAAyCQ,GAAzC,uFACkBJ,IAAAA,IAAA,gBAAmBI,EAAnB,aADlB,cACCD,EADD,yBAEEA,EAASP,MAFX,kEAtBPI,IAAAA,SAAAA,OAAwB,CAAEK,QADV,mCAC4BC,SAAU,SAgCtD,IAAMlB,EAAM,CACVmB,qBA/BK,WAAP,gCAgCEC,cA3BK,WAAP,gCA4BEC,mBAvBK,SAAP,mCAwBEC,wBAnBK,SAAP,mCAoBEC,0BAfK,SAAP,mCAgBEC,KAAM,OACNC,QAAS,UACTC,SAAU,WACVC,OAAQ,SACRC,SAAU,YAGZ,G","sources":["pages/Cast/Cast.js","services/themoviedbApiService.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport API from 'services';\n\n// import PropTypes from 'prop-types';\n\n// import { toastConfigs } from 'config/notifyConfig';\n// import { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport default function Cast() {\n  const [cast, setCast] = useState([]);\n  const [status, setStatus] = useState(API.IDLE);\n  const { movieId } = useParams();\n  const location = useLocation();\n  useEffect(() => {\n    async function getCast() {\n      setStatus(API.PENDING);\n      try {\n        const data = await API.getSearchCastsMovieById(movieId);\n        setCast(data);\n        setStatus(API.RESOLVED);\n        // toast.info('Everything is loaded');\n      } catch (error) {\n        setStatus(API.REJECTED);\n        // toast.error('oops :( Something wrong, try again');\n      }\n    }\n    getCast();\n  }, [movieId]);\n\n  console.log(status, cast, location);\n  return (\n    <>\n      <div>NewPage</div>\n      <p>Ghjklk</p>\n    </>\n  );\n}\n\n// Cast.propTypes = {};\n","// const axios = require('axios');\nimport axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'd3bb769880d7129a875d091908f7afe1';\naxios.defaults.params = { api_key: API_KEY, language: 'en-US' };\n\nexport async function getSearchMovieResult(query = '', page = 1) {\n  const response = await axios.get(`search/movie?query=${query}&page=${page}`);\n  return response.data;\n}\n\nexport async function getMovieTrend() {\n  const response = await axios.get(`/trending/movie/day`);\n  return response.data;\n}\n\nexport async function getSearchMovieById(id) {\n  const response = await axios.get(`movie/${id}`);\n  return response.data;\n}\n\nexport async function getSearchCastsMovieById(id) {\n  const response = await axios.get(`movie/${id}/credits`);\n  return response.data;\n}\n\nexport async function getSearchReviewsMovieById(id) {\n  const response = await axios.get(`movie/${id}/reviews`);\n  return response.data;\n}\n\n// export async function getGenres() {\n//   const { data: genres } = await axios.get(`genre/movie/list`);\n//   return genres;\n// }\n\nconst API = {\n  getSearchMovieResult,\n  getMovieTrend,\n  getSearchMovieById,\n  getSearchCastsMovieById,\n  getSearchReviewsMovieById,\n  IDLE: 'idle',\n  PENDING: 'pending',\n  RESOLVED: 'resolved',\n  LOADED: 'loaded',\n  REJECTED: 'rejected',\n};\n\nexport default API;\n"],"names":["Cast","useState","cast","setCast","API","status","setStatus","movieId","useParams","location","useLocation","useEffect","data","getCast","console","log","axios","query","page","response","id","api_key","language","getSearchMovieResult","getMovieTrend","getSearchMovieById","getSearchCastsMovieById","getSearchReviewsMovieById","IDLE","PENDING","RESOLVED","LOADED","REJECTED"],"sourceRoot":""}